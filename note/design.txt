Region has many
	Machine has many
		Process
		has credit from trading resouces(cpu, memory, disk, and possibly network)
		Credit goes down according to machine type.
		Not enough credit, the machine will be re-imaged.
		Can sleep and give Guard permission to wake it up.

Universe:
	list all teams
		each team has a team leader

Team:
	TeamLeader
	TeamMembers

Market:
	Trade credit with 
	ReferencePrices
		Price:
			Guard: min $1/hour, max 1000 machines

Guard has its strategy
	can pass the responsibility to other Guards
		depending on other Guard's capacity, and cost of running itself

Fixed Price List:
	MachineType ~ Cost
	NetworkType ~ Cost

Hybrid of push ~ pull model
Support both models
Although seems pull model is better/advanced, Push model is more efficient. Faster
to process user requests.

First version:
	long poll instead of push model
	Client send tasks to team leader
	A machine can fetch small tasks
	Task: lots of data, hash join and reduce, save to cassandra, calculate
	
	Client ~ Team leader
	Team Leader ~ Machine
		Data Source
		Start
		End
		Filter
		Selection
	
	scatter
		scatter will start downstream senders
	receiver
	collector
	
	No error handling yet.

How a user works:

	sorter: {
		command: 'sort | uniq | wc -l'
	}
	
	slicer: {
		command: '...'
	}
	slicer hash_to sorter
	
	1. hash each line by f1
	2. send line to mod n, where n is number of sorter
	3. each sorter sort, and collect batches, and save it to cassandra
	1-to-multiple distributor

	Need an agent to receive commands, setup flow.
	
	word count
		f1: devide file into chunks, scatter roundrobin to f2
			
		f2: process file word by word, hash words to f3
		f3: count words, give top 10 to f4
		f4: collect all top 10, find final top 10.
	process gridx data
		f1: process file by lines, each line scatter by hash field 1 to f2.
		f2: sort lines, merge by field 1
		
Job:
	r1: reducer
	input: <key, value>, key is hashed
	command: sort -t ' ' -f 1 | grouper | wc
	files:[]
	env:{name:value}
	command{
		name: role_name,
		files:[],
		env: ["name=value", "n2=v2"],
	}
	process{
		begin: command
		run  : command
		end  : command
	}

A worker announce to team leader:
	role, host, port
A sender find from team leader:
	
Each worker becomes a micro-service
https://github.com/myodc/micro
https://github.com/koding/kite

Agent is similar to Consul
https://www.consul.io/intro/index.html

	
Similar to MBX
https://bitbucket.org/levarnon/mbx/

A read on all golang message queues
http://www.richardbucker.com/2014/07/golang-message-queues.html

Nats
- At most once

In depth architecure difference between zeonmq and nanomq
http://nanomsg.org/documentation-zeromq.html
+ uses only TCP's (or equivalent's) buffers to store the data
